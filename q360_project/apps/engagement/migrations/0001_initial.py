# Generated by Django 5.1.4 on 2025-10-22 15:04

import django.core.validators
import django.db.models.deletion
import simple_history.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("departments", "0014_remove_department_departments_department_tref4ab"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="GamificationBadge",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Badge Name")),
                ("description", models.TextField(verbose_name="Description")),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("performance", "Performance"),
                            ("collaboration", "Collaboration"),
                            ("innovation", "Innovation"),
                            ("leadership", "Leadership"),
                            ("learning", "Learning & Development"),
                            ("milestone", "Milestone"),
                            ("special", "Special Achievement"),
                        ],
                        max_length=20,
                        verbose_name="Category",
                    ),
                ),
                (
                    "icon",
                    models.CharField(default="üèÜ", max_length=50, verbose_name="Icon"),
                ),
                (
                    "color",
                    models.CharField(
                        default="#FFD700", max_length=20, verbose_name="Color"
                    ),
                ),
                (
                    "points_value",
                    models.IntegerField(default=50, verbose_name="Points Value"),
                ),
                (
                    "criteria",
                    models.JSONField(
                        blank=True, null=True, verbose_name="Earning Criteria"
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Active")),
                (
                    "is_rare",
                    models.BooleanField(default=False, verbose_name="Rare Badge"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
            ],
            options={
                "verbose_name": "Gamification Badge",
                "verbose_name_plural": "Gamification Badges",
                "ordering": ["category", "name"],
            },
        ),
        migrations.CreateModel(
            name="SentimentAnalysis",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "source_type",
                    models.CharField(
                        choices=[
                            ("survey", "Survey Response"),
                            ("feedback", "Anonymous Feedback"),
                            ("recognition", "Recognition"),
                            ("comment", "Comment"),
                        ],
                        max_length=20,
                        verbose_name="Source Type",
                    ),
                ),
                ("source_id", models.IntegerField(verbose_name="Source ID")),
                ("text_content", models.TextField(verbose_name="Text Content")),
                (
                    "sentiment",
                    models.CharField(
                        choices=[
                            ("very_positive", "Very Positive"),
                            ("positive", "Positive"),
                            ("neutral", "Neutral"),
                            ("negative", "Negative"),
                            ("very_negative", "Very Negative"),
                        ],
                        max_length=20,
                        verbose_name="Sentiment",
                    ),
                ),
                (
                    "sentiment_score",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(-1.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                        verbose_name="Sentiment Score",
                    ),
                ),
                (
                    "confidence",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                        verbose_name="Confidence",
                    ),
                ),
                (
                    "emotions",
                    models.JSONField(blank=True, null=True, verbose_name="Emotions"),
                ),
                (
                    "keywords",
                    models.JSONField(blank=True, null=True, verbose_name="Keywords"),
                ),
                (
                    "topics",
                    models.JSONField(blank=True, null=True, verbose_name="Topics"),
                ),
                (
                    "analyzed_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Analyzed At"),
                ),
            ],
            options={
                "verbose_name": "Sentiment Analysis",
                "verbose_name_plural": "Sentiment Analyses",
                "ordering": ["-analyzed_at"],
            },
        ),
        migrations.CreateModel(
            name="AnonymousFeedback",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "anonymous_id",
                    models.CharField(
                        max_length=50, unique=True, verbose_name="Anonymous ID"
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("suggestion", "Suggestion"),
                            ("complaint", "Complaint"),
                            ("concern", "Concern"),
                            ("praise", "Praise"),
                            ("question", "Question"),
                            ("other", "Other"),
                        ],
                        max_length=20,
                        verbose_name="Category",
                    ),
                ),
                ("subject", models.CharField(max_length=200, verbose_name="Subject")),
                ("message", models.TextField(verbose_name="Message")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("new", "New"),
                            ("reviewing", "Under Review"),
                            ("in_progress", "In Progress"),
                            ("resolved", "Resolved"),
                            ("closed", "Closed"),
                        ],
                        default="new",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="medium",
                        max_length=20,
                        verbose_name="Priority",
                    ),
                ),
                (
                    "submitted_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Submitted At"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                ("response", models.TextField(blank=True, verbose_name="Response")),
                (
                    "responded_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Responded At"
                    ),
                ),
                (
                    "sentiment_score",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Sentiment Score"
                    ),
                ),
                (
                    "sentiment_label",
                    models.CharField(
                        blank=True, max_length=20, verbose_name="Sentiment"
                    ),
                ),
                (
                    "department",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="departments.department",
                    ),
                ),
                (
                    "responded_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="feedback_responses",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Anonymous Feedback",
                "verbose_name_plural": "Anonymous Feedbacks",
                "ordering": ["-submitted_at"],
            },
        ),
        migrations.CreateModel(
            name="EngagementScore",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "score_type",
                    models.CharField(
                        choices=[
                            ("nps", "Net Promoter Score"),
                            ("esat", "Employee Satisfaction"),
                            ("engagement", "Overall Engagement"),
                            ("wellbeing", "Well-being Score"),
                        ],
                        max_length=20,
                        verbose_name="Score Type",
                    ),
                ),
                (
                    "score_value",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Score Value",
                    ),
                ),
                (
                    "calculated_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Calculated At"
                    ),
                ),
                ("period_start", models.DateField(verbose_name="Period Start")),
                ("period_end", models.DateField(verbose_name="Period End")),
                (
                    "is_promoter",
                    models.BooleanField(default=False, verbose_name="Promoter"),
                ),
                (
                    "is_passive",
                    models.BooleanField(default=False, verbose_name="Passive"),
                ),
                (
                    "is_detractor",
                    models.BooleanField(default=False, verbose_name="Detractor"),
                ),
                ("notes", models.TextField(blank=True, verbose_name="Notes")),
                (
                    "department",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="departments.department",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="engagement_scores",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Engagement Score",
                "verbose_name_plural": "Engagement Scores",
                "ordering": ["-calculated_at"],
            },
        ),
        migrations.CreateModel(
            name="HistoricalAnonymousFeedback",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "anonymous_id",
                    models.CharField(
                        db_index=True, max_length=50, verbose_name="Anonymous ID"
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("suggestion", "Suggestion"),
                            ("complaint", "Complaint"),
                            ("concern", "Concern"),
                            ("praise", "Praise"),
                            ("question", "Question"),
                            ("other", "Other"),
                        ],
                        max_length=20,
                        verbose_name="Category",
                    ),
                ),
                ("subject", models.CharField(max_length=200, verbose_name="Subject")),
                ("message", models.TextField(verbose_name="Message")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("new", "New"),
                            ("reviewing", "Under Review"),
                            ("in_progress", "In Progress"),
                            ("resolved", "Resolved"),
                            ("closed", "Closed"),
                        ],
                        default="new",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="medium",
                        max_length=20,
                        verbose_name="Priority",
                    ),
                ),
                (
                    "submitted_at",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="Submitted At"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="Updated At"
                    ),
                ),
                ("response", models.TextField(blank=True, verbose_name="Response")),
                (
                    "responded_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Responded At"
                    ),
                ),
                (
                    "sentiment_score",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Sentiment Score"
                    ),
                ),
                (
                    "sentiment_label",
                    models.CharField(
                        blank=True, max_length=20, verbose_name="Sentiment"
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "department",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="departments.department",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "responded_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Anonymous Feedback",
                "verbose_name_plural": "historical Anonymous Feedbacks",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalEngagementScore",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "score_type",
                    models.CharField(
                        choices=[
                            ("nps", "Net Promoter Score"),
                            ("esat", "Employee Satisfaction"),
                            ("engagement", "Overall Engagement"),
                            ("wellbeing", "Well-being Score"),
                        ],
                        max_length=20,
                        verbose_name="Score Type",
                    ),
                ),
                (
                    "score_value",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Score Value",
                    ),
                ),
                (
                    "calculated_at",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="Calculated At"
                    ),
                ),
                ("period_start", models.DateField(verbose_name="Period Start")),
                ("period_end", models.DateField(verbose_name="Period End")),
                (
                    "is_promoter",
                    models.BooleanField(default=False, verbose_name="Promoter"),
                ),
                (
                    "is_passive",
                    models.BooleanField(default=False, verbose_name="Passive"),
                ),
                (
                    "is_detractor",
                    models.BooleanField(default=False, verbose_name="Detractor"),
                ),
                ("notes", models.TextField(blank=True, verbose_name="Notes")),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "department",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="departments.department",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Engagement Score",
                "verbose_name_plural": "historical Engagement Scores",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalPulseSurvey",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("title", models.CharField(max_length=200, verbose_name="Title")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "survey_type",
                    models.CharField(
                        choices=[
                            ("weekly", "Weekly Check-in"),
                            ("monthly", "Monthly Pulse"),
                            ("quarterly", "Quarterly Review"),
                            ("event", "Event Feedback"),
                            ("custom", "Custom Survey"),
                        ],
                        default="custom",
                        max_length=20,
                        verbose_name="Survey Type",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("active", "Active"),
                            ("closed", "Closed"),
                            ("archived", "Archived"),
                        ],
                        default="draft",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="Created At"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="Updated At"
                    ),
                ),
                ("start_date", models.DateTimeField(verbose_name="Start Date")),
                ("end_date", models.DateTimeField(verbose_name="End Date")),
                (
                    "is_anonymous",
                    models.BooleanField(default=False, verbose_name="Anonymous Survey"),
                ),
                (
                    "is_mandatory",
                    models.BooleanField(default=False, verbose_name="Mandatory"),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Pulse Survey",
                "verbose_name_plural": "historical Pulse Surveys",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalRecognition",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "recognition_type",
                    models.CharField(
                        choices=[
                            ("thanks", "Thank You"),
                            ("kudos", "Kudos"),
                            ("award", "Award"),
                            ("milestone", "Milestone"),
                            ("achievement", "Achievement"),
                        ],
                        max_length=20,
                        verbose_name="Type",
                    ),
                ),
                ("title", models.CharField(max_length=200, verbose_name="Title")),
                ("message", models.TextField(verbose_name="Message")),
                ("is_public", models.BooleanField(default=True, verbose_name="Public")),
                ("points", models.IntegerField(default=10, verbose_name="Points")),
                (
                    "created_at",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="Created At"
                    ),
                ),
                ("likes_count", models.IntegerField(default=0, verbose_name="Likes")),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "badge",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="engagement.gamificationbadge",
                    ),
                ),
                (
                    "given_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "given_to",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Recognition",
                "verbose_name_plural": "historical Recognitions",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="PointsTransaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "transaction_type",
                    models.CharField(
                        choices=[
                            ("earned", "Earned"),
                            ("awarded", "Awarded"),
                            ("deducted", "Deducted"),
                            ("bonus", "Bonus"),
                        ],
                        max_length=20,
                        verbose_name="Type",
                    ),
                ),
                ("points", models.IntegerField(verbose_name="Points")),
                ("reason", models.CharField(max_length=200, verbose_name="Reason")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "source_type",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="Source Type"
                    ),
                ),
                (
                    "source_id",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Source ID"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_transactions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="points_transactions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Points Transaction",
                "verbose_name_plural": "Points Transactions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PulseSurvey",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200, verbose_name="Title")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "survey_type",
                    models.CharField(
                        choices=[
                            ("weekly", "Weekly Check-in"),
                            ("monthly", "Monthly Pulse"),
                            ("quarterly", "Quarterly Review"),
                            ("event", "Event Feedback"),
                            ("custom", "Custom Survey"),
                        ],
                        default="custom",
                        max_length=20,
                        verbose_name="Survey Type",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("active", "Active"),
                            ("closed", "Closed"),
                            ("archived", "Archived"),
                        ],
                        default="draft",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                ("start_date", models.DateTimeField(verbose_name="Start Date")),
                ("end_date", models.DateTimeField(verbose_name="End Date")),
                (
                    "is_anonymous",
                    models.BooleanField(default=False, verbose_name="Anonymous Survey"),
                ),
                (
                    "is_mandatory",
                    models.BooleanField(default=False, verbose_name="Mandatory"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_surveys",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "target_departments",
                    models.ManyToManyField(
                        blank=True,
                        related_name="pulse_surveys",
                        to="departments.department",
                    ),
                ),
                (
                    "target_users",
                    models.ManyToManyField(
                        blank=True,
                        related_name="targeted_surveys",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Pulse Survey",
                "verbose_name_plural": "Pulse Surveys",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Recognition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "recognition_type",
                    models.CharField(
                        choices=[
                            ("thanks", "Thank You"),
                            ("kudos", "Kudos"),
                            ("award", "Award"),
                            ("milestone", "Milestone"),
                            ("achievement", "Achievement"),
                        ],
                        max_length=20,
                        verbose_name="Type",
                    ),
                ),
                ("title", models.CharField(max_length=200, verbose_name="Title")),
                ("message", models.TextField(verbose_name="Message")),
                ("is_public", models.BooleanField(default=True, verbose_name="Public")),
                ("points", models.IntegerField(default=10, verbose_name="Points")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                ("likes_count", models.IntegerField(default=0, verbose_name="Likes")),
                (
                    "badge",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="engagement.gamificationbadge",
                    ),
                ),
                (
                    "given_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="given_recognitions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "given_to",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="received_recognitions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "liked_by",
                    models.ManyToManyField(
                        blank=True,
                        related_name="liked_recognitions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Recognition",
                "verbose_name_plural": "Recognitions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="SurveyQuestion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("question_text", models.TextField(verbose_name="Question Text")),
                (
                    "question_type",
                    models.CharField(
                        choices=[
                            ("rating", "Rating (1-5)"),
                            ("nps", "NPS (0-10)"),
                            ("text", "Open Text"),
                            ("yes_no", "Yes/No"),
                            ("multiple_choice", "Multiple Choice"),
                            ("emoji", "Emoji Rating"),
                        ],
                        max_length=20,
                        verbose_name="Question Type",
                    ),
                ),
                ("order", models.IntegerField(default=0, verbose_name="Order")),
                (
                    "is_required",
                    models.BooleanField(default=True, verbose_name="Required"),
                ),
                (
                    "options",
                    models.JSONField(blank=True, null=True, verbose_name="Options"),
                ),
                (
                    "survey",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="questions",
                        to="engagement.pulsesurvey",
                    ),
                ),
            ],
            options={
                "verbose_name": "Survey Question",
                "verbose_name_plural": "Survey Questions",
                "ordering": ["survey", "order"],
            },
        ),
        migrations.CreateModel(
            name="UserPoints",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "total_points",
                    models.IntegerField(default=0, verbose_name="Total Points"),
                ),
                (
                    "current_level",
                    models.IntegerField(default=1, verbose_name="Current Level"),
                ),
                (
                    "performance_points",
                    models.IntegerField(default=0, verbose_name="Performance Points"),
                ),
                (
                    "collaboration_points",
                    models.IntegerField(default=0, verbose_name="Collaboration Points"),
                ),
                (
                    "innovation_points",
                    models.IntegerField(default=0, verbose_name="Innovation Points"),
                ),
                (
                    "learning_points",
                    models.IntegerField(default=0, verbose_name="Learning Points"),
                ),
                ("rank", models.IntegerField(default=0, verbose_name="Rank")),
                (
                    "last_updated",
                    models.DateTimeField(auto_now=True, verbose_name="Last Updated"),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="points_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Points",
                "verbose_name_plural": "User Points",
                "ordering": ["-total_points"],
            },
        ),
        migrations.CreateModel(
            name="SurveyResponse",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "rating_value",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Rating Value"
                    ),
                ),
                ("text_value", models.TextField(blank=True, verbose_name="Text Value")),
                (
                    "boolean_value",
                    models.BooleanField(
                        blank=True, null=True, verbose_name="Boolean Value"
                    ),
                ),
                (
                    "submitted_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Submitted At"
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="responses",
                        to="engagement.surveyquestion",
                    ),
                ),
                (
                    "survey",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="responses",
                        to="engagement.pulsesurvey",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="survey_responses",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Survey Response",
                "verbose_name_plural": "Survey Responses",
                "unique_together": {("survey", "question", "user")},
            },
        ),
        migrations.CreateModel(
            name="UserBadge",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "earned_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Earned At"),
                ),
                ("reason", models.TextField(blank=True, verbose_name="Reason")),
                (
                    "is_displayed",
                    models.BooleanField(
                        default=True, verbose_name="Display on Profile"
                    ),
                ),
                (
                    "awarded_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="awarded_badges",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "badge",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="awarded_to",
                        to="engagement.gamificationbadge",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="earned_badges",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Badge",
                "verbose_name_plural": "User Badges",
                "ordering": ["-earned_at"],
                "unique_together": {("user", "badge", "earned_at")},
            },
        ),
    ]
