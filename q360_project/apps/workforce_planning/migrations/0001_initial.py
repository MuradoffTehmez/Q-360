# Generated by Django 4.2.23 on 2025-10-14 22:02

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("departments", "0005_department_departments_department_tref4ab"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("training", "0002_trainingresource_training_tr_provide_516d62_idx_and_more"),
        ("competencies", "0002_competency_competencie_name_eac81b_idx_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="CriticalRole",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "criticality_level",
                    models.CharField(
                        choices=[
                            ("low", "Aşağı"),
                            ("medium", "Orta"),
                            ("high", "Yüksək"),
                            ("critical", "Kritik"),
                        ],
                        default="medium",
                        max_length=10,
                        verbose_name="Kritiklik Səviyyəsi",
                    ),
                ),
                ("business_impact", models.TextField(verbose_name="Biznesə Təsiri")),
                (
                    "required_experience_years",
                    models.IntegerField(
                        default=0, verbose_name="Tələb olunan Təcrübə (İl)"
                    ),
                ),
                (
                    "succession_readiness",
                    models.CharField(
                        choices=[
                            ("no_successor", "Varis Yoxdur"),
                            ("needs_development", "İnkişaf Tələb olunur"),
                            ("ready_1_2_years", "1-2 İl sonra Hazır"),
                            ("ready_now", "İndi Hazır"),
                        ],
                        default="no_successor",
                        max_length=20,
                        verbose_name="Varislik Hazırlığı",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Aktivdir"),
                ),
                (
                    "designated_date",
                    models.DateField(auto_now_add=True, verbose_name="Təyin Tarixi"),
                ),
                ("notes", models.TextField(blank=True, verbose_name="Qeydlər")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "current_holder",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="held_critical_roles",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Hal-hazırkı Tutucusu",
                    ),
                ),
                (
                    "position",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="critical_role_designations",
                        to="departments.position",
                    ),
                ),
                (
                    "required_competencies",
                    models.ManyToManyField(
                        blank=True,
                        to="competencies.competency",
                        verbose_name="Tələb olunan Kompetensiyalar",
                    ),
                ),
            ],
            options={
                "verbose_name": "Kritik Rol",
                "verbose_name_plural": "Kritik Rollar",
                "ordering": ["-criticality_level", "position__title"],
            },
        ),
        migrations.CreateModel(
            name="TalentMatrix",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "performance_level",
                    models.CharField(
                        choices=[
                            ("low", "Aşağı Performans"),
                            ("medium", "Orta Performans"),
                            ("high", "Yüksək Performans"),
                        ],
                        max_length=10,
                        verbose_name="Performans Səviyyəsi",
                    ),
                ),
                (
                    "potential_level",
                    models.CharField(
                        choices=[
                            ("low", "Aşağı Potensial"),
                            ("medium", "Orta Potensial"),
                            ("high", "Yüksək Potensial"),
                        ],
                        max_length=10,
                        verbose_name="Potensial Səviyyəsi",
                    ),
                ),
                (
                    "box_category",
                    models.CharField(
                        choices=[
                            ("box1", "1. Qutu - Zəif Nəticə"),
                            ("box2", "2. Qutu - İnkişaf Ehtiyacı"),
                            ("box3", "3. Qutu - Yüksək Potensial"),
                            ("box4", "4. Qutu - Əsas Kadr"),
                            ("box5", "5. Qutu - Güclü İfaçı"),
                            ("box6", "6. Qutu - Gələcək Lider"),
                            ("box7", "7. Qutu - İstedad"),
                            ("box8", "8. Qutu - Yüksək İfaçı"),
                            ("box9", "9. Qutu - Üstün İstedad"),
                        ],
                        max_length=10,
                        verbose_name="9-Qutu Kateqoriyası",
                    ),
                ),
                (
                    "performance_score",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Performans Balı",
                    ),
                ),
                (
                    "potential_score",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Potensial Balı",
                    ),
                ),
                (
                    "assessment_date",
                    models.DateField(verbose_name="Qiymətləndirmə Tarixi"),
                ),
                (
                    "assessment_period",
                    models.CharField(
                        help_text="Məsələn: 2024 Q1",
                        max_length=50,
                        verbose_name="Qiymətləndirmə Dövrü",
                    ),
                ),
                ("notes", models.TextField(blank=True, verbose_name="Qeydlər")),
                (
                    "development_actions",
                    models.TextField(blank=True, verbose_name="İnkişaf Tədbirləri"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "assessed_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="talent_assessments_made",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Qiymətləndirən",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="talent_assessments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "İstedad Matrisi Qiymətləndirməsi",
                "verbose_name_plural": "İstedad Matrisi Qiymətləndirmələri",
                "ordering": ["-assessment_date", "-created_at"],
                "indexes": [
                    models.Index(
                        fields=["user", "-assessment_date"],
                        name="workforce_p_user_id_fc86de_idx",
                    ),
                    models.Index(
                        fields=["box_category"], name="workforce_p_box_cat_f086ba_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="SuccessionCandidate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "readiness_level",
                    models.CharField(
                        choices=[
                            ("not_ready", "Hazır Deyil"),
                            ("needs_development", "İnkişaf Tələb olunur"),
                            ("ready_1_2_years", "1-2 İl sonra Hazır"),
                            ("ready_6_12_months", "6-12 Ay sonra Hazır"),
                            ("ready_now", "İndi Hazır"),
                        ],
                        default="needs_development",
                        max_length=20,
                        verbose_name="Hazırlıq Səviyyəsi",
                    ),
                ),
                (
                    "readiness_score",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Hazırlıq Balı",
                    ),
                ),
                (
                    "strengths",
                    models.TextField(blank=True, verbose_name="Güclü Tərəflər"),
                ),
                (
                    "development_needs",
                    models.TextField(blank=True, verbose_name="İnkişaf Ehtiyacları"),
                ),
                (
                    "development_plan",
                    models.TextField(blank=True, verbose_name="İnkişaf Planı"),
                ),
                (
                    "nomination_date",
                    models.DateField(auto_now_add=True, verbose_name="Təqdim Tarixi"),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Aktivdir"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "candidate",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="succession_candidacies",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Namizəd",
                    ),
                ),
                (
                    "critical_role",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="succession_candidates",
                        to="workforce_planning.criticalrole",
                        verbose_name="Kritik Rol",
                    ),
                ),
                (
                    "nominated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="succession_nominations",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Təqdim Edən",
                    ),
                ),
            ],
            options={
                "verbose_name": "Varislik Namizədi",
                "verbose_name_plural": "Varislik Namizədləri",
                "ordering": ["-readiness_score", "candidate__last_name"],
                "unique_together": {("critical_role", "candidate")},
            },
        ),
        migrations.CreateModel(
            name="CompetencyGap",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "current_score",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Cari Bal",
                    ),
                ),
                (
                    "target_score",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Hədəf Bal",
                    ),
                ),
                (
                    "gap_score",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Hədəf bal - Cari bal",
                        max_digits=5,
                        verbose_name="Boşluq Balı",
                    ),
                ),
                (
                    "gap_status",
                    models.CharField(
                        choices=[
                            ("no_gap", "Boşluq Yoxdur"),
                            ("minor_gap", "Kiçik Boşluq"),
                            ("moderate_gap", "Orta Boşluq"),
                            ("major_gap", "Böyük Boşluq"),
                        ],
                        default="moderate_gap",
                        max_length=20,
                        verbose_name="Boşluq Statusu",
                    ),
                ),
                (
                    "recommended_actions",
                    models.TextField(
                        blank=True, verbose_name="Tövsiyə olunan Tədbirlər"
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Aşağı"),
                            ("medium", "Orta"),
                            ("high", "Yüksək"),
                            ("urgent", "Təcili"),
                        ],
                        default="medium",
                        max_length=10,
                        verbose_name="Prioritet",
                    ),
                ),
                (
                    "identified_date",
                    models.DateField(
                        auto_now_add=True, verbose_name="Müəyyən edilmə Tarixi"
                    ),
                ),
                (
                    "target_close_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Hədəf Bağlanma Tarixi"
                    ),
                ),
                (
                    "is_closed",
                    models.BooleanField(default=False, verbose_name="Bağlandı"),
                ),
                (
                    "closed_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Bağlanma Tarixi"
                    ),
                ),
                (
                    "closure_notes",
                    models.TextField(blank=True, verbose_name="Bağlanma Qeydləri"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "competency",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="identified_gaps",
                        to="competencies.competency",
                        verbose_name="Kompetensiya",
                    ),
                ),
                (
                    "current_level",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="current_level_gaps",
                        to="competencies.proficiencylevel",
                        verbose_name="Cari Səviyyə",
                    ),
                ),
                (
                    "recommended_trainings",
                    models.ManyToManyField(
                        blank=True,
                        to="training.trainingresource",
                        verbose_name="Tövsiyə olunan Təlimlər",
                    ),
                ),
                (
                    "target_level",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="target_level_gaps",
                        to="competencies.proficiencylevel",
                        verbose_name="Hədəf Səviyyə",
                    ),
                ),
                (
                    "target_position",
                    models.ForeignKey(
                        blank=True,
                        help_text="Bu boşluq hansı vəzifə üçün müəyyən edilib",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="departments.position",
                        verbose_name="Hədəf Vəzifə",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="competency_gaps",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="İstifadəçi",
                    ),
                ),
            ],
            options={
                "verbose_name": "Kompetensiya Boşluğu",
                "verbose_name_plural": "Kompetensiya Boşluqları",
                "ordering": ["-priority", "-gap_score", "user__last_name"],
                "indexes": [
                    models.Index(
                        fields=["user", "-gap_score"],
                        name="workforce_p_user_id_dd7dcf_idx",
                    ),
                    models.Index(
                        fields=["priority", "-identified_date"],
                        name="workforce_p_priorit_1f8413_idx",
                    ),
                ],
            },
        ),
    ]
