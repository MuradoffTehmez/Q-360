# Generated by Django 5.1.4 on 2025-10-23 13:37

from django.db import migrations
from django.contrib.postgres.operations import TrigramExtension


def create_trigram_indexes(apps, schema_editor):
    """PostgreSQL Trigram indekslərini yaradır."""
    if schema_editor.connection.vendor != 'postgresql':
        return

    with schema_editor.connection.cursor() as cursor:
        # User table trigram indexes
        cursor.execute("""
            CREATE INDEX IF NOT EXISTS accounts_user_first_name_trgm_idx
            ON accounts_user USING gin (first_name gin_trgm_ops);
        """)
        cursor.execute("""
            CREATE INDEX IF NOT EXISTS accounts_user_last_name_trgm_idx
            ON accounts_user USING gin (last_name gin_trgm_ops);
        """)
        cursor.execute("""
            CREATE INDEX IF NOT EXISTS accounts_user_username_trgm_idx
            ON accounts_user USING gin (username gin_trgm_ops);
        """)

        # Competency table trigram indexes
        cursor.execute("""
            CREATE INDEX IF NOT EXISTS competencies_competency_name_trgm_idx
            ON competencies_competency USING gin (name gin_trgm_ops);
        """)

        # Training table trigram indexes
        cursor.execute("""
            CREATE INDEX IF NOT EXISTS training_trainingresource_title_trgm_idx
            ON training_trainingresource USING gin (title gin_trgm_ops);
        """)

        # Department table trigram indexes
        cursor.execute("""
            CREATE INDEX IF NOT EXISTS departments_department_name_trgm_idx
            ON departments_department USING gin (name gin_trgm_ops);
        """)

        # Azerbaijani text search configuration
        try:
            cursor.execute("""
                CREATE TEXT SEARCH CONFIGURATION azerbaijani (COPY = simple);
            """)
        except Exception:
            # Already exists, ignore
            pass


def drop_trigram_indexes(apps, schema_editor):
    """Trigram indekslərini silir (reverse migration)."""
    if schema_editor.connection.vendor != 'postgresql':
        return

    with schema_editor.connection.cursor() as cursor:
        cursor.execute("DROP INDEX IF EXISTS accounts_user_first_name_trgm_idx;")
        cursor.execute("DROP INDEX IF EXISTS accounts_user_last_name_trgm_idx;")
        cursor.execute("DROP INDEX IF EXISTS accounts_user_username_trgm_idx;")
        cursor.execute("DROP INDEX IF EXISTS competencies_competency_name_trgm_idx;")
        cursor.execute("DROP INDEX IF EXISTS training_trainingresource_title_trgm_idx;")
        cursor.execute("DROP INDEX IF EXISTS departments_department_name_trgm_idx;")


class Migration(migrations.Migration):

    dependencies = []

    operations = [
        # PostgreSQL Trigram extension aktivləşdir
        TrigramExtension(),

        # Trigram indekslərini yarat
        migrations.RunPython(
            create_trigram_indexes,
            reverse_code=drop_trigram_indexes
        ),
    ]
