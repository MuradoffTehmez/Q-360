from django.db import models
from django.contrib.auth import get_user_model
from django.utils.translation import gettext_lazy as _
from datetime import timedelta
from decimal import Decimal

User = get_user_model()


class SystemKPI(models.Model):
    """
    System Key Performance Indicators for analytics dashboard
    """
    KPI_TYPE_CHOICES = [
        ('overall', _('Overall Performance')),
        ('salary', _('Salary Trends')),
        ('hiring', _('Hiring Trends')),
        ('performance', _('Performance Trends')),
        ('staffing', _('Staffing Forecast')),
        ('budget', _('Budget Forecast')),
    ]

    name = models.CharField(_('KPI Name'), max_length=200)
    kpi_type = models.CharField(_('KPI Type'), max_length=20, choices=KPI_TYPE_CHOICES)
    value = models.DecimalField(_('Value'), max_digits=15, decimal_places=2)
    target = models.DecimalField(_('Target'), max_digits=15, decimal_places=2, null=True, blank=True)
    unit = models.CharField(_('Unit'), max_length=20, default='%')
    period_start = models.DateTimeField(_('Period Start'))
    period_end = models.DateTimeField(_('Period End'))
    created_at = models.DateTimeField(_('Created At'), auto_now_add=True)
    updated_at = models.DateTimeField(_('Updated At'), auto_now=True)

    class Meta:
        verbose_name = _('System KPI')
        verbose_name_plural = _('System KPIs')
        ordering = ['-created_at']

    def __str__(self):
        return f"{self.name} ({self.value}{self.unit})"


class DashboardWidget(models.Model):
    """
    Dashboard widget configuration
    """
    WIDGET_TYPE_CHOICES = [
        ('realtime_stats', _('Real-time Statistics')),
        ('kpi_summary', _('KPI Summary')),
        ('trend_analysis', _('Trend Analysis')),
        ('forecasting', _('Forecasting')),
        ('heatmap', _('Heatmap')),
        ('line_chart', _('Line Chart')),
        ('bar_chart', _('Bar Chart')),
        ('radar_chart', _('Radar Chart')),
    ]

    name = models.CharField(_('Widget Name'), max_length=200)
    widget_type = models.CharField(_('Widget Type'), max_length=20, choices=WIDGET_TYPE_CHOICES)
    title = models.CharField(_('Title'), max_length=200)
    description = models.TextField(_('Description'), blank=True)
    order = models.PositiveIntegerField(_('Display Order'), default=0)
    is_active = models.BooleanField(_('Is Active'), default=True)
    config = models.JSONField(_('Configuration'), default=dict, blank=True)
    created_at = models.DateTimeField(_('Created At'), auto_now_add=True)
    updated_at = models.DateTimeField(_('Updated At'), auto_now=True)

    class Meta:
        verbose_name = _('Dashboard Widget')
        verbose_name_plural = _('Dashboard Widgets')
        ordering = ['order', 'name']

    def __str__(self):
        return self.name


class AnalyticsReport(models.Model):
    """
    Analytics report generation and storage
    """
    REPORT_TYPE_CHOICES = [
        ('kpi_summary', _('KPI Summary')),
        ('trend_analysis', _('Trend Analysis')),
        ('forecast', _('Forecast Report')),
        ('comparative', _('Comparative Analysis')),
        ('departmental', _('Departmental Analysis')),
    ]

    name = models.CharField(_('Report Name'), max_length=200)
    report_type = models.CharField(_('Report Type'), max_length=20, choices=REPORT_TYPE_CHOICES)
    generated_by = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name=_('Generated By'))
    data = models.JSONField(_('Report Data'), default=dict)
    start_date = models.DateTimeField(_('Start Date'))
    end_date = models.DateTimeField(_('End Date'))
    is_published = models.BooleanField(_('Is Published'), default=False)
    file_path = models.CharField(_('File Path'), max_length=500, blank=True)
    created_at = models.DateTimeField(_('Created At'), auto_now_add=True)

    class Meta:
        verbose_name = _('Analytics Report')
        verbose_name_plural = _('Analytics Reports')
        ordering = ['-created_at']

    def __str__(self):
        return f"{self.name} - {self.created_at.strftime('%Y-%m-%d %H:%M')}"


class TrendData(models.Model):
    """
    Historical trend data for analytics
    """
    data_type = models.CharField(_('Data Type'), max_length=50, 
                                choices=[
                                    ('salary', _('Salary')),
                                    ('performance', _('Performance')),
                                    ('hiring', _('Hiring')),
                                    ('attendance', _('Attendance')),
                                    ('compensation', _('Compensation')),
                                ])
    period = models.DateField(_('Period'))
    value = models.DecimalField(_('Value'), max_digits=15, decimal_places=2)
    department = models.ForeignKey('departments.Department', on_delete=models.CASCADE,
                                  null=True, blank=True, verbose_name=_('Department'))
    organization = models.ForeignKey('departments.Organization', on_delete=models.CASCADE,
                                   null=True, blank=True, verbose_name=_('Organization'))
    created_at = models.DateTimeField(_('Created At'), auto_now_add=True)

    class Meta:
        verbose_name = _('Trend Data')
        verbose_name_plural = _('Trend Data')
        ordering = ['-period']
        unique_together = ['data_type', 'period', 'department', 'organization']

    def __str__(self):
        return f"{self.data_type} - {self.period} - {self.value}"


class ForecastData(models.Model):
    """
    AI-based forecasting data
    """
    forecast_type = models.CharField(_('Forecast Type'), max_length=50,
                                   choices=[
                                       ('staffing', _('Staffing')),
                                       ('budget', _('Budget')),
                                       ('performance', _('Performance')),
                                       ('hiring', _('Hiring')),
                                   ])
    forecast_date = models.DateField(_('Forecast Date'))
    predicted_value = models.DecimalField(_('Predicted Value'), max_digits=15, decimal_places=2)
    confidence_level = models.DecimalField(_('Confidence Level'), max_digits=5, decimal_places=2, default=0.00)
    actual_value = models.DecimalField(_('Actual Value'), max_digits=15, decimal_places=2, null=True, blank=True)
    department = models.ForeignKey('departments.Department', on_delete=models.CASCADE,
                                  null=True, blank=True, verbose_name=_('Department'))
    organization = models.ForeignKey('departments.Organization', on_delete=models.CASCADE,
                                   null=True, blank=True, verbose_name=_('Organization'))
    explanation = models.TextField(_('Explanation'), blank=True)
    created_at = models.DateTimeField(_('Created At'), auto_now_add=True)

    class Meta:
        verbose_name = _('Forecast Data')
        verbose_name_plural = _('Forecast Data')
        ordering = ['-forecast_date']
        unique_together = ['forecast_type', 'forecast_date', 'department', 'organization']

    def __str__(self):
        return f"{self.forecast_type} forecast - {self.forecast_date}: {self.predicted_value}"


class RealTimeStat(models.Model):
    """
    Real-time statistics for dashboard display
    """
    STAT_TYPE_CHOICES = [
        ('active_users', _('Active Users')),
        ('pending_evaluations', _('Pending Evaluations')),
        ('new_hires', _('New Hires')),
        ('avg_performance', _('Average Performance')),
        ('budget_utilization', _('Budget Utilization')),
        ('leave_requests', _('Leave Requests')),
        ('training_completions', _('Training Completions')),
    ]

    stat_type = models.CharField(_('Stat Type'), max_length=30, choices=STAT_TYPE_CHOICES)
    current_value = models.DecimalField(_('Current Value'), max_digits=15, decimal_places=2)
    previous_value = models.DecimalField(_('Previous Value'), max_digits=15, decimal_places=2, null=True, blank=True)
    unit = models.CharField(_('Unit'), max_length=20, default='')
    description = models.CharField(_('Description'), max_length=200, blank=True)
    last_updated = models.DateTimeField(_('Last Updated'), auto_now=True)
    organization = models.ForeignKey('departments.Organization', on_delete=models.CASCADE,
                                   null=True, blank=True, verbose_name=_('Organization'))

    class Meta:
        verbose_name = _('Real-time Stat')
        verbose_name_plural = _('Real-time Stats')
        ordering = ['stat_type']

    def __str__(self):
        return f"{self.stat_type}: {self.current_value}{self.unit}"